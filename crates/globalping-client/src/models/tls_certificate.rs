/*
 * Globalping API
 *
 * The Globalping API allows you to monitor, debug, and benchmark your internet infrastructure using a globally distributed network of probes.  The API is public, free to use, and doesn't require authentication. However, it implements rate limits to ensure fair usage and reliability, and some of the limits are higher for authenticated users. Sign up on the [Globalping Dashboard](https://dash.globalping.io/) to enjoy the higher limits.  Root endpoint: https://api.globalping.io  ## Limits and credits  | Operation | Unauthenticated user | Authenticated user | |---|---|---| | **Measurements** ||| | Create a measurement | 250 tests/hour | 500 tests/hour* | | Get a measurement by ID | 2 requests/second/measurement | 2 requests/second/measurement | | **Probes** ||| | List probes currently online | no limit | no limit | | **Limits** ||| | Get current rate limits | no limit | no limit |  \\*Additional measurements may be created by spending credits. Each test above the limit costs one credit. Learn more about credits on the [Globalping website](https://globalping.io/credits).  ## Client guidelines  If you're implementing an application that interacts with the API, please refer to the \"Client guidelines\" section in the description of each endpoint. This way, you can provide the best UX and reduce the likelihood of your app breaking in the future.  ### General guidelines for non-browser-based apps:  - Set a `User-Agent` header. We recommend that you follow the format and approach [used here](https://github.com/jsdelivr/data.jsdelivr.com/blob/60c5154d26c403ba9dd403a8ddc5e42a31931f0d/config/default.js#L9). - Set an `Accept-Encoding` header with a value of either `br` (preferred) or `gzip`, depending on what your client can support. Compression has a significant impact on the response size. - Implement ETag-based client-side caching using the `ETag`/`If-None-Match` headers when requesting the measurement status. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: d@globalping.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TlsCertificate {
    /// The negotiated SSL/TLS protocol version. 
    #[serde(rename = "protocol")]
    pub protocol: String,
    /// The OpenSSL name of the cipher suite. 
    #[serde(rename = "cipherName")]
    pub cipher_name: String,
    /// Indicates whether a trusted authority signed the certificate. 
    #[serde(rename = "authorized")]
    pub authorized: bool,
    /// The reason for rejecting the certificate if `authorized` is `false`. 
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// The creation date and time of the certificate.
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// The expiration date and time of the certificate.
    #[serde(rename = "expiresAt")]
    pub expires_at: String,
    #[serde(rename = "subject")]
    pub subject: Box<models::TlsCertificateSubject>,
    #[serde(rename = "issuer")]
    pub issuer: Box<models::TlsCertificateIssuer>,
    /// The type of the used key, or `null` for unrecognized types.
    #[serde(rename = "keyType", deserialize_with = "Option::deserialize")]
    pub key_type: Option<KeyType>,
    /// The size of the used key, or `null` for unrecognized types.
    #[serde(rename = "keyBits", deserialize_with = "Option::deserialize")]
    pub key_bits: Option<f64>,
    /// The certificate serial number as a : separated HEX string. 
    #[serde(rename = "serialNumber")]
    pub serial_number: String,
    /// The SHA-256 digest of the DER-encoded certificate as a : separated HEX string. 
    #[serde(rename = "fingerprint256")]
    pub fingerprint256: String,
    /// The public key as a : separated HEX string, or `null` for unrecognized types. 
    #[serde(rename = "publicKey", deserialize_with = "Option::deserialize")]
    pub public_key: Option<String>,
}

impl TlsCertificate {
    pub fn new(protocol: String, cipher_name: String, authorized: bool, created_at: String, expires_at: String, subject: models::TlsCertificateSubject, issuer: models::TlsCertificateIssuer, key_type: Option<KeyType>, key_bits: Option<f64>, serial_number: String, fingerprint256: String, public_key: Option<String>) -> TlsCertificate {
        TlsCertificate {
            protocol,
            cipher_name,
            authorized,
            error: None,
            created_at,
            expires_at,
            subject: Box::new(subject),
            issuer: Box::new(issuer),
            key_type,
            key_bits,
            serial_number,
            fingerprint256,
            public_key,
        }
    }
}
/// The type of the used key, or `null` for unrecognized types.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum KeyType {
    #[serde(rename = "RSA")]
    Rsa,
    #[serde(rename = "EC")]
    Ec,
    #[serde(rename = "null")]
    Null,
}

impl Default for KeyType {
    fn default() -> KeyType {
        Self::Rsa
    }
}

