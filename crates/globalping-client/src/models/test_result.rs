/*
 * Globalping API
 *
 * The Globalping API allows you to monitor, debug, and benchmark your internet infrastructure using a globally distributed network of probes.  The API is public, free to use, and doesn't require authentication. However, it implements rate limits to ensure fair usage and reliability, and some of the limits are higher for authenticated users. Sign up on the [Globalping Dashboard](https://dash.globalping.io/) to enjoy the higher limits.  Root endpoint: https://api.globalping.io  ## Limits and credits  | Operation | Unauthenticated user | Authenticated user | |---|---|---| | **Measurements** ||| | Create a measurement | 250 tests/hour | 500 tests/hour* | | Get a measurement by ID | 2 requests/second/measurement | 2 requests/second/measurement | | **Probes** ||| | List probes currently online | no limit | no limit | | **Limits** ||| | Get current rate limits | no limit | no limit |  \\*Additional measurements may be created by spending credits. Each test above the limit costs one credit. Learn more about credits on the [Globalping website](https://globalping.io/credits).  ## Client guidelines  If you're implementing an application that interacts with the API, please refer to the \"Client guidelines\" section in the description of each endpoint. This way, you can provide the best UX and reduce the likelihood of your app breaking in the future.  ### General guidelines for non-browser-based apps:  - Set a `User-Agent` header. We recommend that you follow the format and approach [used here](https://github.com/jsdelivr/data.jsdelivr.com/blob/60c5154d26c403ba9dd403a8ddc5e42a31931f0d/config/default.js#L9). - Set an `Accept-Encoding` header with a value of either `br` (preferred) or `gzip`, depending on what your client can support. Compression has a significant impact on the response size. - Implement ETag-based client-side caching using the `ETag`/`If-None-Match` headers when requesting the measurement status. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: d@globalping.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResult {
    #[serde(rename = "status")]
    pub status: Box<models::FinishedTestStatus>,
    /// The raw output of the test. Can be presented to users but is not meant to be parsed by clients. Please use the individual values provided in other fields for automated processing. 
    #[serde(rename = "rawOutput")]
    pub raw_output: String,
    /// The resolved IP address of the `target`.
    #[serde(rename = "resolvedAddress", deserialize_with = "Option::deserialize")]
    pub resolved_address: Option<String>,
    /// The resolved hostname of the `target`.
    #[serde(rename = "resolvedHostname", deserialize_with = "Option::deserialize")]
    pub resolved_hostname: Option<String>,
    #[serde(rename = "stats")]
    pub stats: Box<models::FinishedPingTestResultAllOfStats>,
    #[serde(rename = "timings")]
    pub timings: Box<models::FinishedHttpTestResultAllOfTimings>,
    /// An array containing details about each hop.
    #[serde(rename = "hops")]
    pub hops: Vec<models::FinishedMtrTestResultAllOfHops>,
    /// The HTTP response status code.
    #[serde(rename = "statusCode")]
    pub status_code: i32,
    /// The HTTP response status code name.
    #[serde(rename = "statusCodeName")]
    pub status_code_name: String,
    /// The hostname or IP of the resolver that answered the query.
    #[serde(rename = "resolver")]
    pub resolver: String,
    /// An array of the received resource records.
    #[serde(rename = "answers")]
    pub answers: Vec<models::DnsTestAnswer>,
    /// The raw HTTP response headers.
    #[serde(rename = "rawHeaders")]
    pub raw_headers: String,
    /// The raw HTTP response body or `null` if there was no body in response. Note that only the first 10 kb are returned. 
    #[serde(rename = "rawBody")]
    pub raw_body: String,
    /// Indicates whether the `rawBody` value was truncated due to being too big. 
    #[serde(rename = "truncated")]
    pub truncated: bool,
    /// The HTTP response headers. The value may be an array of strings for headers with multiple values, e.g., `Set-Cookie`.
    #[serde(rename = "headers")]
    pub headers: std::collections::HashMap<String, models::FinishedHttpTestResultAllOfHeaders>,
    #[serde(rename = "tls")]
    pub tls: Box<models::TlsCertificate>,
}

impl TestResult {
    pub fn new(status: models::FinishedTestStatus, raw_output: String, resolved_address: Option<String>, resolved_hostname: Option<String>, stats: models::FinishedPingTestResultAllOfStats, timings: models::FinishedHttpTestResultAllOfTimings, hops: Vec<models::FinishedMtrTestResultAllOfHops>, status_code: i32, status_code_name: String, resolver: String, answers: Vec<models::DnsTestAnswer>, raw_headers: String, raw_body: String, truncated: bool, headers: std::collections::HashMap<String, models::FinishedHttpTestResultAllOfHeaders>, tls: models::TlsCertificate) -> TestResult {
        TestResult {
            status: Box::new(status),
            raw_output,
            resolved_address,
            resolved_hostname,
            stats: Box::new(stats),
            timings: Box::new(timings),
            hops,
            status_code,
            status_code_name,
            resolver,
            answers,
            raw_headers,
            raw_body,
            truncated,
            headers,
            tls: Box::new(tls),
        }
    }
}

