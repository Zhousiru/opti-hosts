/*
 * Globalping API
 *
 * The Globalping API allows you to monitor, debug, and benchmark your internet infrastructure using a globally distributed network of probes.  The API is public, free to use, and doesn't require authentication. However, it implements rate limits to ensure fair usage and reliability, and some of the limits are higher for authenticated users. Sign up on the [Globalping Dashboard](https://dash.globalping.io/) to enjoy the higher limits.  Root endpoint: https://api.globalping.io  ## Limits and credits  | Operation | Unauthenticated user | Authenticated user | |---|---|---| | **Measurements** ||| | Create a measurement | 250 tests/hour | 500 tests/hour* | | Get a measurement by ID | 2 requests/second/measurement | 2 requests/second/measurement | | **Probes** ||| | List probes currently online | no limit | no limit | | **Limits** ||| | Get current rate limits | no limit | no limit |  \\*Additional measurements may be created by spending credits. Each test above the limit costs one credit. Learn more about credits on the [Globalping website](https://globalping.io/credits).  ## Client guidelines  If you're implementing an application that interacts with the API, please refer to the \"Client guidelines\" section in the description of each endpoint. This way, you can provide the best UX and reduce the likelihood of your app breaking in the future.  ### General guidelines for non-browser-based apps:  - Set a `User-Agent` header. We recommend that you follow the format and approach [used here](https://github.com/jsdelivr/data.jsdelivr.com/blob/60c5154d26c403ba9dd403a8ddc5e42a31931f0d/config/default.js#L9). - Set an `Accept-Encoding` header with a value of either `br` (preferred) or `gzip`, depending on what your client can support. Compression has a significant impact on the response size. - Implement ETag-based client-side caching using the `ETag`/`If-None-Match` headers when requesting the measurement status. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: d@globalping.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FinishedPingTestResultAllOfStats : Summary `rtt` and packet loss statistics. All times are in milliseconds. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FinishedPingTestResultAllOfStats {
    #[serde(rename = "min")]
    pub min: Box<models::StatsRttMinNullable>,
    #[serde(rename = "avg")]
    pub avg: Box<models::StatsRttAvgNullable>,
    #[serde(rename = "max")]
    pub max: Box<models::StatsRttMaxNullable>,
    /// The number of packets sent.
    #[serde(rename = "total")]
    pub total: i32,
    /// The number of received packets.
    #[serde(rename = "rcv")]
    pub rcv: i32,
    /// The number of dropped packets (`total` - `rcv`).
    #[serde(rename = "drop")]
    pub drop: i32,
    /// The percentage of dropped packets.
    #[serde(rename = "loss")]
    pub loss: f64,
}

impl FinishedPingTestResultAllOfStats {
    /// Summary `rtt` and packet loss statistics. All times are in milliseconds. 
    pub fn new(min: models::StatsRttMinNullable, avg: models::StatsRttAvgNullable, max: models::StatsRttMaxNullable, total: i32, rcv: i32, drop: i32, loss: f64) -> FinishedPingTestResultAllOfStats {
        FinishedPingTestResultAllOfStats {
            min: Box::new(min),
            avg: Box::new(avg),
            max: Box::new(max),
            total,
            rcv,
            drop,
            loss,
        }
    }
}

